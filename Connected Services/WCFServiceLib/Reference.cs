//------------------------------------------------------------------------------
// <auto-generated>
//     Этот код создан программой.
//     Исполняемая версия:4.0.30319.42000
//
//     Изменения в этом файле могут привести к неправильной работе и будут потеряны в случае
//     повторной генерации кода.
// </auto-generated>
//------------------------------------------------------------------------------

namespace WCFClient.WCFServiceLib {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="WCFServiceLib.IWCFService")]
    public interface IWCFService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWCFService/GetData", ReplyAction="http://tempuri.org/IWCFService/GetDataResponse")]
        string GetData();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWCFService/GetData", ReplyAction="http://tempuri.org/IWCFService/GetDataResponse")]
        System.Threading.Tasks.Task<string> GetDataAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWCFService/AddUser", ReplyAction="http://tempuri.org/IWCFService/AddUserResponse")]
        int AddUser(string name);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWCFService/AddUser", ReplyAction="http://tempuri.org/IWCFService/AddUserResponse")]
        System.Threading.Tasks.Task<int> AddUserAsync(string name);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWCFService/AddAddress", ReplyAction="http://tempuri.org/IWCFService/AddAddressResponse")]
        int AddAddress(string city, string street, int build, int flat);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWCFService/AddAddress", ReplyAction="http://tempuri.org/IWCFService/AddAddressResponse")]
        System.Threading.Tasks.Task<int> AddAddressAsync(string city, string street, int build, int flat);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWCFService/AddOrder", ReplyAction="http://tempuri.org/IWCFService/AddOrderResponse")]
        int AddOrder(string goodname);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWCFService/AddOrder", ReplyAction="http://tempuri.org/IWCFService/AddOrderResponse")]
        System.Threading.Tasks.Task<int> AddOrderAsync(string goodname);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWCFService/RemoveUser", ReplyAction="http://tempuri.org/IWCFService/RemoveUserResponse")]
        bool RemoveUser(int UserId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWCFService/RemoveUser", ReplyAction="http://tempuri.org/IWCFService/RemoveUserResponse")]
        System.Threading.Tasks.Task<bool> RemoveUserAsync(int UserId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWCFService/RemoveAddress", ReplyAction="http://tempuri.org/IWCFService/RemoveAddressResponse")]
        bool RemoveAddress(int AddrId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWCFService/RemoveAddress", ReplyAction="http://tempuri.org/IWCFService/RemoveAddressResponse")]
        System.Threading.Tasks.Task<bool> RemoveAddressAsync(int AddrId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWCFService/RemoveOrder", ReplyAction="http://tempuri.org/IWCFService/RemoveOrderResponse")]
        bool RemoveOrder(int OrdId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWCFService/RemoveOrder", ReplyAction="http://tempuri.org/IWCFService/RemoveOrderResponse")]
        System.Threading.Tasks.Task<bool> RemoveOrderAsync(int OrdId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWCFService/AddOrderToUser", ReplyAction="http://tempuri.org/IWCFService/AddOrderToUserResponse")]
        bool AddOrderToUser(int OrdId, int UserId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWCFService/AddOrderToUser", ReplyAction="http://tempuri.org/IWCFService/AddOrderToUserResponse")]
        System.Threading.Tasks.Task<bool> AddOrderToUserAsync(int OrdId, int UserId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWCFService/AddAddressToUser", ReplyAction="http://tempuri.org/IWCFService/AddAddressToUserResponse")]
        bool AddAddressToUser(int AddrId, int UserId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWCFService/AddAddressToUser", ReplyAction="http://tempuri.org/IWCFService/AddAddressToUserResponse")]
        System.Threading.Tasks.Task<bool> AddAddressToUserAsync(int AddrId, int UserId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWCFService/AddUserToAddress", ReplyAction="http://tempuri.org/IWCFService/AddUserToAddressResponse")]
        bool AddUserToAddress(int UserId, int AddrId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWCFService/AddUserToAddress", ReplyAction="http://tempuri.org/IWCFService/AddUserToAddressResponse")]
        System.Threading.Tasks.Task<bool> AddUserToAddressAsync(int UserId, int AddrId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWCFService/AddOrderToAddress", ReplyAction="http://tempuri.org/IWCFService/AddOrderToAddressResponse")]
        bool AddOrderToAddress(int OrderId, int AddrId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWCFService/AddOrderToAddress", ReplyAction="http://tempuri.org/IWCFService/AddOrderToAddressResponse")]
        System.Threading.Tasks.Task<bool> AddOrderToAddressAsync(int OrderId, int AddrId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWCFService/RemoveOrderFromUser", ReplyAction="http://tempuri.org/IWCFService/RemoveOrderFromUserResponse")]
        bool RemoveOrderFromUser(int OrdId, int UserId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWCFService/RemoveOrderFromUser", ReplyAction="http://tempuri.org/IWCFService/RemoveOrderFromUserResponse")]
        System.Threading.Tasks.Task<bool> RemoveOrderFromUserAsync(int OrdId, int UserId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWCFService/RemoveAddressFromUser", ReplyAction="http://tempuri.org/IWCFService/RemoveAddressFromUserResponse")]
        bool RemoveAddressFromUser(int AddrId, int UserId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWCFService/RemoveAddressFromUser", ReplyAction="http://tempuri.org/IWCFService/RemoveAddressFromUserResponse")]
        System.Threading.Tasks.Task<bool> RemoveAddressFromUserAsync(int AddrId, int UserId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWCFService/RemoveUserFromAddress", ReplyAction="http://tempuri.org/IWCFService/RemoveUserFromAddressResponse")]
        bool RemoveUserFromAddress(int UserId, int AddrId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWCFService/RemoveUserFromAddress", ReplyAction="http://tempuri.org/IWCFService/RemoveUserFromAddressResponse")]
        System.Threading.Tasks.Task<bool> RemoveUserFromAddressAsync(int UserId, int AddrId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWCFService/RemoveOrderFromAddress", ReplyAction="http://tempuri.org/IWCFService/RemoveOrderFromAddressResponse")]
        bool RemoveOrderFromAddress(int OrderId, int AddrId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWCFService/RemoveOrderFromAddress", ReplyAction="http://tempuri.org/IWCFService/RemoveOrderFromAddressResponse")]
        System.Threading.Tasks.Task<bool> RemoveOrderFromAddressAsync(int OrderId, int AddrId);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IWCFServiceChannel : WCFClient.WCFServiceLib.IWCFService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class WCFServiceClient : System.ServiceModel.ClientBase<WCFClient.WCFServiceLib.IWCFService>, WCFClient.WCFServiceLib.IWCFService {
        
        public WCFServiceClient() {
        }
        
        public WCFServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public WCFServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public WCFServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public WCFServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public string GetData() {
            return base.Channel.GetData();
        }
        
        public System.Threading.Tasks.Task<string> GetDataAsync() {
            return base.Channel.GetDataAsync();
        }
        
        public int AddUser(string name) {
            return base.Channel.AddUser(name);
        }
        
        public System.Threading.Tasks.Task<int> AddUserAsync(string name) {
            return base.Channel.AddUserAsync(name);
        }
        
        public int AddAddress(string city, string street, int build, int flat) {
            return base.Channel.AddAddress(city, street, build, flat);
        }
        
        public System.Threading.Tasks.Task<int> AddAddressAsync(string city, string street, int build, int flat) {
            return base.Channel.AddAddressAsync(city, street, build, flat);
        }
        
        public int AddOrder(string goodname) {
            return base.Channel.AddOrder(goodname);
        }
        
        public System.Threading.Tasks.Task<int> AddOrderAsync(string goodname) {
            return base.Channel.AddOrderAsync(goodname);
        }
        
        public bool RemoveUser(int UserId) {
            return base.Channel.RemoveUser(UserId);
        }
        
        public System.Threading.Tasks.Task<bool> RemoveUserAsync(int UserId) {
            return base.Channel.RemoveUserAsync(UserId);
        }
        
        public bool RemoveAddress(int AddrId) {
            return base.Channel.RemoveAddress(AddrId);
        }
        
        public System.Threading.Tasks.Task<bool> RemoveAddressAsync(int AddrId) {
            return base.Channel.RemoveAddressAsync(AddrId);
        }
        
        public bool RemoveOrder(int OrdId) {
            return base.Channel.RemoveOrder(OrdId);
        }
        
        public System.Threading.Tasks.Task<bool> RemoveOrderAsync(int OrdId) {
            return base.Channel.RemoveOrderAsync(OrdId);
        }
        
        public bool AddOrderToUser(int OrdId, int UserId) {
            return base.Channel.AddOrderToUser(OrdId, UserId);
        }
        
        public System.Threading.Tasks.Task<bool> AddOrderToUserAsync(int OrdId, int UserId) {
            return base.Channel.AddOrderToUserAsync(OrdId, UserId);
        }
        
        public bool AddAddressToUser(int AddrId, int UserId) {
            return base.Channel.AddAddressToUser(AddrId, UserId);
        }
        
        public System.Threading.Tasks.Task<bool> AddAddressToUserAsync(int AddrId, int UserId) {
            return base.Channel.AddAddressToUserAsync(AddrId, UserId);
        }
        
        public bool AddUserToAddress(int UserId, int AddrId) {
            return base.Channel.AddUserToAddress(UserId, AddrId);
        }
        
        public System.Threading.Tasks.Task<bool> AddUserToAddressAsync(int UserId, int AddrId) {
            return base.Channel.AddUserToAddressAsync(UserId, AddrId);
        }
        
        public bool AddOrderToAddress(int OrderId, int AddrId) {
            return base.Channel.AddOrderToAddress(OrderId, AddrId);
        }
        
        public System.Threading.Tasks.Task<bool> AddOrderToAddressAsync(int OrderId, int AddrId) {
            return base.Channel.AddOrderToAddressAsync(OrderId, AddrId);
        }
        
        public bool RemoveOrderFromUser(int OrdId, int UserId) {
            return base.Channel.RemoveOrderFromUser(OrdId, UserId);
        }
        
        public System.Threading.Tasks.Task<bool> RemoveOrderFromUserAsync(int OrdId, int UserId) {
            return base.Channel.RemoveOrderFromUserAsync(OrdId, UserId);
        }
        
        public bool RemoveAddressFromUser(int AddrId, int UserId) {
            return base.Channel.RemoveAddressFromUser(AddrId, UserId);
        }
        
        public System.Threading.Tasks.Task<bool> RemoveAddressFromUserAsync(int AddrId, int UserId) {
            return base.Channel.RemoveAddressFromUserAsync(AddrId, UserId);
        }
        
        public bool RemoveUserFromAddress(int UserId, int AddrId) {
            return base.Channel.RemoveUserFromAddress(UserId, AddrId);
        }
        
        public System.Threading.Tasks.Task<bool> RemoveUserFromAddressAsync(int UserId, int AddrId) {
            return base.Channel.RemoveUserFromAddressAsync(UserId, AddrId);
        }
        
        public bool RemoveOrderFromAddress(int OrderId, int AddrId) {
            return base.Channel.RemoveOrderFromAddress(OrderId, AddrId);
        }
        
        public System.Threading.Tasks.Task<bool> RemoveOrderFromAddressAsync(int OrderId, int AddrId) {
            return base.Channel.RemoveOrderFromAddressAsync(OrderId, AddrId);
        }
    }
}
